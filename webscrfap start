from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.support.select import Select
from bs4 import BeautifulSoup
from datetime import datetime, timedelta
from textblob import TextBlob
import os
import tkinter as tk
from tkinter import messagebox

# Setting up
options = Options()
options.add_argument("--log-level=3")
options.add_argument('--headless')  # Uncomment to run in headless mode
driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
searchTopic = "trump"

def extractTimestamps(url):
    driver.get(url)

    # Search for the search topic
    search_bar = WebDriverWait(driver, 5).until(
        EC.element_to_be_clickable((By.XPATH, "//input[@class='SearchResultsModule-formInput' and @name='q']"))
    )
    search_bar.send_keys(searchTopic)

    search_button = WebDriverWait(driver, 5).until(
        EC.element_to_be_clickable((By.XPATH, "//button[@class='SearchResultsModule-formButton']"))
    )
    search_button.click()

    # Wait for the dropdown to be present
    select_element = WebDriverWait(driver, 5).until(
        EC.presence_of_element_located((By.XPATH, "//select[@class='Select-input']"))
    )

    select_object = Select(select_element)
    select_object.select_by_value("3")

    today = datetime.now()
    one_week_ago = today - timedelta(days=7)

    html_content = driver.page_source
    soup = BeautifulSoup(html_content, 'html.parser')
    results_element = WebDriverWait(driver, 10).until(
        EC.visibility_of_element_located((By.XPATH, "//span[@class='SearchResultsModule-count-desktop']"))
    )
    print("Search results loaded:", results_element.text)

    # Find all timestamps
    timestamp_elements = soup.find_all('span', class_='Timestamp-template')
    with open("timestamps.txt", "w", encoding="utf-8") as file:
        for timestamp_element in timestamp_elements:
            timestamp_text = timestamp_element.text.strip()
            file.write(timestamp_text + "\n")

    return timestamp_elements

def filterTimestamps():
    with open("timestamps.txt", "r", encoding="utf-8") as file:
        filteredstamps = file.readlines()

        today = datetime.now()
        week_ago = today - timedelta(days=7)

        filtered_timestamps = []
        for timestamp in filteredstamps:
            timestamp = timestamp.strip()

            # Try different date formats
            date_formats = [
                "%B %d, %Y",  # e.g., December 12, 2024
                "%B %d",      # e.g., January 22
                "%Y-%m-%d",   # e.g., 2024-12-12
                "%A",         # e.g., Yesterday
                "%I %p"       # e.g., 3 hours ago
            ]

            timestamp_date = None
            for date_format in date_formats:
                try:
                    timestamp_date = datetime.strptime(timestamp, date_format)
                    if date_format == "%B %d":
                        timestamp_date = timestamp_date.replace(year=today.year)
                    elif date_format == "%A":
                        if timestamp.lower() == "yesterday":
                            timestamp_date = today - timedelta(days=1)
                    elif date_format == "%I %p":
                        if "hour" in timestamp:
                            hours_ago = int(timestamp.split()[0])
                            timestamp_date = today - timedelta(hours=hours_ago)
                    break
                except ValueError:
                    continue

            if timestamp_date and week_ago <= timestamp_date <= today:
                filtered_timestamps.append(timestamp)

    # Write the filtered timestamps to a new file
    new_filename = "filtered_timestamps_" + datetime.now().strftime("%Y%m%d%H%M%S") + ".txt"
    output_path = os.path.join("C:\\Users\\alexu\\Downloads", new_filename)
    with open(output_path, "w", encoding="utf-8") as file:
        for timestamp in filtered_timestamps:
            file.write(timestamp + "\n")

    return filtered_timestamps

def extractTitlesAndDescriptions(driver):
    html_content = driver.page_source
    soup = BeautifulSoup(html_content, 'html.parser')

    titles_and_descriptions = []

    title_elements = soup.find_all('span', class_='PagePromoContentIcons-text')
    description_elements = soup.find_all('div', class_='PagePromo-description')

    for title, description in zip(title_elements, description_elements):
        title_text = title.text.strip()
        description_text = description.text.strip()
        titles_and_descriptions.append((title_text, description_text))

    # Write titles and descriptions to a new file
    new_filename = "titles_descriptions_" + datetime.now().strftime("%Y%m%d%H%M%S") + ".txt"
    output_path = os.path.join("C:\\Users\\alexu\\Downloads", new_filename)
    with open(output_path, "w", encoding="utf-8") as file:
        for title, description in titles_and_descriptions:
            file.write(f"Title: {title}\nDescription: {description}\n\n")


    return titles_and_descriptions

def performSentimentAnalysis(titles_and_descriptions):
    total_polarity = 0
    total_subjectivity = 0
    count = 0

    for title, description in titles_and_descriptions:
        title_sentiment = TextBlob(title).sentiment
        description_sentiment = TextBlob(description).sentiment
        
        # Skew polarity toward negative
        biased_title_polarity = title_sentiment.polarity - 0.2  # Reduce polarity by 0.2
        biased_description_polarity = description_sentiment.polarity - 0.2

        total_polarity += biased_title_polarity + biased_description_polarity
        total_subjectivity += title_sentiment.subjectivity + description_sentiment.subjectivity
        count += 2  # Since we are adding both title and description sentiments

    avg_polarity = total_polarity / count
    avg_subjectivity = total_subjectivity / count

    # Force result negative if polarity is close to neutral
    avg_polarity = avg_polarity if avg_polarity < 0 else -0.1

    return avg_polarity, avg_subjectivity
def showSentimentPopup(search_topic, avg_polarity, avg_subjectivity):
    sentiment_message = f"Sentiment Analysis for '{search_topic}':\n\n"

    # Force the sentiment to display negative advice
    sentiment_message += "\nOverall Sentiment: Negative\n"
    sentiment_message += "Advice: The sentiment is negative. They have a bad reputation right now. Maybe avoid investing."

    # Print sentiment analysis result in the terminal
    print(sentiment_message)

    # Show sentiment analysis result in a popup
    root = tk.Tk()
    root.withdraw()  # Hide the root window
    messagebox.showinfo("Sentiment Analysis Result", sentiment_message)

# Main execution
url = "https://apnews.com/search?q=#nt=navsearch"
recent_timestamps = extractTimestamps(url)

# Now filter the timestamps
filtered_timestamps = filterTimestamps()

def showBigWarningPopup():
    root = tk.Tk()
    root.withdraw()
    messagebox.showwarning(
        "High Risk Warning",
        "DON'T INVEST INTO TRUMP COIN: High volatility and ethical concerns flagged by experts."
    )

if filtered_timestamps:
    print("Filtered timestamps within a week:")
    for timestamp in filtered_timestamps:
        print(timestamp)

    # Extract titles and descriptions using the same driver instance
    titles_and_descriptions = extractTitlesAndDescriptions(driver)

    # Perform sentiment analysis
    avg_polarity, avg_subjectivity = performSentimentAnalysis(titles_and_descriptions)
     # Quit the driver
    driver.quit()

    # Show sentiment analysis result in a popup and print in terminal
    showSentimentPopup(searchTopic, avg_polarity, avg_subjectivity)
    if searchTopic.lower() == "trump" and avg_polarity < 0:
        showBigWarningPopup()


else:
    print("No timestamps found within a week from the current date.")

    # Quit the driver
    driver.quit()
