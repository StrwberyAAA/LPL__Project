from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.support.select import Select
import os
from datetime import datetime, timedelta

# Setting up
options = Options()
options.add_argument("--log-level=3")
# options.add_argument('--headless')  # Uncomment to run in headless mode

def extractTimestamps(url):
    driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
    driver.get(url)
  
    # Search for "trump" (replace with your desired search term)
    search_bar = WebDriverWait(driver, 5).until(
        EC.element_to_be_clickable((By.XPATH, "//input[@class='SearchResultsModule-formInput' and @name='q']"))
    )
    search_bar.send_keys("trump")

    search_button = WebDriverWait(driver, 5).until(
        EC.element_to_be_clickable((By.XPATH, "//button[@class='SearchResultsModule-formButton']"))
    )
    search_button.click()

    # Wait for the dropdown to be present
    select_element = WebDriverWait(driver, 5).until(
        EC.presence_of_element_located((By.XPATH, "//select[@class='Select-input']"))
    )

    select_object = Select(select_element)
    select_object.select_by_value("3")

    today = datetime.now()
    one_week_ago = today - timedelta(days=7)

    html_content = driver.page_source
    soup = BeautifulSoup(html_content, 'html.parser')
    results_element = WebDriverWait(driver, 10).until(
        EC.visibility_of_element_located((By.XPATH, "//span[@class='SearchResultsModule-count-desktop']"))
    )
    print("Search results loaded:", results_element.text)


    # Find all timestamps
    timestamp_elements = soup.find_all('span', class_='Timestamp-template')
    with open("timestamps.txt", "w", encoding="utf-8") as file:
        for timestamp_element in timestamp_elements:
            timestamp_text = timestamp_element.text.strip()
            file.write(timestamp_text + "\n")
    os.startfile("timestamps.txt")

    driver.quit()
    return timestamp_elements



def filterTimestamps():
    with open("timestamps.txt", "r", encoding="utf-8") as file:
        filteredstamps = file.readlines()

        today = datetime.now()
        week_ago = today - timedelta(days=7)

        filtered_timestamps = []
        for timestamp in filteredstamps:
            timestamp = timestamp.strip()

            # Try different date formats
            date_formats = [
                "%B %d, %Y",  # e.g., December 12, 2024
                "%B %d",      # e.g., January 22
                "%Y-%m-%d",   # e.g., 2024-12-12
                "%A",         # e.g., Yesterday
                "%I %p"       # e.g., 3 hours ago
            ]

            timestamp_date = None
            for date_format in date_formats:
                try:
                    timestamp_date = datetime.strptime(timestamp, date_format)
                    if date_format == "%B %d":
                        timestamp_date = timestamp_date.replace(year=today.year)
                    elif date_format == "%A":
                        if timestamp.lower() == "yesterday":
                            timestamp_date = today - timedelta(days=1)
                    elif date_format == "%I %p":
                        if "hour" in timestamp:
                            hours_ago = int(timestamp.split()[0])
                            timestamp_date = today - timedelta(hours=hours_ago)
                    break
                except ValueError:
                    continue

            if timestamp_date and week_ago <= timestamp_date <= today:
                filtered_timestamps.append(timestamp)

    # Write the filtered timestamps to a new file
    with open("filtered_timestamps.txt", "w", encoding="utf-8") as file:
        for timestamp in filtered_timestamps:
            file.write(timestamp + "\n")

    return filtered_timestamps

# Main execution
url = "https://apnews.com/search?q=#nt=navsearch"
recent_timestamps = extractTimestamps(url)

# Now filter the timestamps
filtered_timestamps = filterTimestamps()

if filtered_timestamps:
    print("Filtered timestamps within a week:")
    for timestamp in filtered_timestamps:
        print(timestamp)
else:
    print("No timestamps found within a week from the current date.")
